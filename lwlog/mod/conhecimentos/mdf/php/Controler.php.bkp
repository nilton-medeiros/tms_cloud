<?php
class Controler extends App {
	/**
	 * Consultar MDFe's
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function read_mdfe() {
		$p = $this->get_sql_param();
		$id = trim($_GET['id']);
		$situacao = trim($_GET['situacao']);
		$status = trim($_GET['status']);

		$filter	= "WHERE emp_id = ".$this->empresa->emp_id." ";
		$filter.= $p->filter;
		if (!empty($id)) {
			$p->start = 0;
			$filter.= "AND id IN (".$id.") ";
		} elseif (!empty($situacao)) {
			$situacao = explode(",", $situacao);
			foreach ($situacao as $key => $value) {
				$situacao[$key] = $this->escape($value, 'string');
			}
			$situacao = implode(",", $situacao);
			$filter.="AND situacao IN (".$situacao.") ";
		} elseif (!empty($status) && $status != 'TODOS') {
			$filter.="AND DATEDIFF(CURDATE(), dhEmi) <= ";
			if ($status == 'ÚLTIMOS 90 DIAS') {
				$filter.= "90 ";
			} elseif ($status == 'ÚLTIMOS 180 DIAS') {
				$filter.= "180 ";
			} elseif ($status == 'ÚLTIMOS 365 DIAS') {
				$filter.= "365 ";
			}
		}

		$sql = "SELECT * FROM view_mdfes ";
		$sql.= $filter;
		if (!empty($p->sort)) {
			$sql.= " ORDER BY ".$p->sort;
		}
		if ($p->limit) {
			$sql.= " LIMIT ".$p->start.",".$p->limit;
		}
		$query = $this->query($sql); $list = array();
		while ($field = $this->fetch_object($query)) {
			array_push($list, $field);
		}

		$this->free_result($query);

		$sql = "SELECT COUNT(id) AS total FROM view_mdfes ".$filter;
		$query = $this->query($sql);
		$total = $this->fetch_object($query)->total;
		$this->free_result($query);

		print json_encode(array('total'=>$total,'data'=>$list));
	}
	/**
	 * Consultar eventos do MDF-e. Uso exclusivo do componente Grade
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function read_eventos() {
		$sql = "SELECT * FROM mdfes_eventos WHERE mdfe_id = ".intval($_GET['mdfe_id']);
		$query = $this->query($sql); $list = array();
		while ($field = $this->fetch_object($query)) {
			if (!empty($field->motivo) && !empty($field->detalhe) && $field->motivo != $field->detalhe) {
				$field->detalhe.= " / ";
				$field->detalhe.= $field->motivo;
			}
			array_push($list, $field);
		}
		print json_encode(array('total'=>count($list),'data'=>$list));
	}
	/**
	 * Consultar conhecimentos relacionado ao MDF selecionado. Uso exclusivo do componente Grade
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function read_cte() {
		$sql = "SELECT ";
		$sql.= "t1.cte_id,";
		$sql.= "t1.cte_serie,";
		$sql.= "t1.cte_minuta,";
		$sql.= "t1.cte_numero,";
		$sql.= "t1.cte_chave,";
		$sql.= "t1.cte_pdf,";
		$sql.= "CONCAT(t3.cid_uf, ' - ', t3.cid_municipio, IF(t3.cid_nome_aeroporto IS NOT NULL AND t3.cid_nome_aeroporto != '' AND t3.cid_sigla IS NOT NULL AND t3.cid_sigla != '', CONCAT(' (', t3.cid_sigla, ' - ', t3.cid_nome_aeroporto,')'), '')) AS cid_destino ";
		$sql.= "FROM ctes AS t1 ";
		$sql.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
		$sql.= "LEFT JOIN cidades AS t3 ON t3.cid_id = t1.cid_id_destino ";
		$sql.= "WHERE t2.mdfe_id = ".intval($_GET["mdfe_id"]);
		$query = $this->query($sql);
		if (!$query) {
			print json_encode($this->get_sql_error());
			return false;
		}
		$list = array();
		while ($field = $this->fetch_object($query)) {
			array_push($list, $field);
		}
		$this->free_result($query);

		print json_encode(array('total'=>count($list),'data'=>$list));
	}
	/**
	 * Consultar conhecimentos em aberto para gerar MDF-e
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function read_ctes_aberto() {
		$_cidade_origem_uf = trim($_GET['cid_origem_uf']);
		$_cid_destino_uf = trim($_GET['cid_destino_uf']);
		$cid_origem_uf = $this->escape($_cidade_origem_uf, 'string');
		$cid_destino_uf = $this->escape($_cid_destino_uf, 'string');
		$periodo_inicial = $this->escape(trim($_GET['periodo_inicial']), 'date');
		$periodo_final = $this->escape(trim($_GET['periodo_final']), 'date');

		$sql = "SELECT ";
		$sql.= "t1.cte_id,";
		$sql.= "t1.cte_ciot,";
		$sql.= "t1.cte_serie,";
		$sql.= "t1.cte_minuta,";
		$sql.= "t1.cte_numero,";
		$sql.= "t1.cte_peso_bruto,";
		$sql.= "t1.cte_info_fisco,";
		$sql.= "t1.cte_obs_gerais,";
		$sql.= "t1.cte_valor_total,";
		$sql.= "t1.cte_valor_carga,";
		$sql.= "t1.cte_data_hora_emissao,";
		$sql.= "t1.cid_origem_uf,";
		$sql.= "t1.cid_destino_uf,";
		$sql.= "t1.cid_origem_nome_completo,";
		$sql.= "t1.cid_destino_nome_completo,";
		$sql.= "'' AS codAgPorto,";
		$sql.= "1 AS TpEmit,";
		$sql.= "'Prestador de serviço de transporte' AS TpEmit_rotulo ";
		$sql.= "FROM view_ctes AS t1 ";
		$sql.= "WHERE t1.emp_id = ".$this->empresa->emp_id." ";
		if (!empty($_cidade_origem_uf)) {
			$sql.= "AND t1.cid_origem_uf = ".$cid_origem_uf." ";
		}
		if (!empty($_cid_destino_uf)) {
			$sql.= "AND t1.cid_destino_uf = ".$cid_destino_uf." ";
		}
		$sql.= "AND (DATE(t1.cte_data_hora_emissao) BETWEEN ".$periodo_inicial." AND ".$periodo_final.") ";
		$sql.= "AND t1.cte_situacao = 'AUTORIZADO' ";
		$sql.= "AND t1.cte_chave IS NOT NULL AND t1.cte_chave != '' ";
		$sql.= "AND t1.cte_id NOT IN (";
		$sql.= "SELECT st1.ctes_id ";
		$sql.= "FROM mdfes_ctes AS st1 ";
		$sql.= "INNER JOIN mdfes AS st2 ON st2.id = st1.mdfe_id ";
		$sql.= "WHERE st2.situacao != 'CANCELADO' ";
		$sql.= "AND st2.emp_id = ".$this->empresa->emp_id;
		$sql.= ") ";
		$sql.= "ORDER BY t1.cid_origem_nome_completo ASC, t1.cid_destino_nome_completo ASC, t1.cte_id DESC";
		$query = $this->query($sql);
		if (!$query) {
			print json_encode($this->get_sql_error());
			return false;
		}
		$list = array();
		while ($field = $this->fetch_object($query)) {
			array_push($list, $field);
		}
		$this->free_result($query);

		print json_encode(array('total'=>count($list),'data'=>$list));
	}

	function gerar_mdf() {
		$records = json_decode($_POST["records"]);
		$tRecords = count($records);
		$qCTe = 0; $vCarga = 0;
		$ctes_id = array(); $list_id = array();

		for ($i=0; $i < $tRecords; $i++) {
			$item = $records[$i];
			$next = $records[$i + 1];

			$qCTe++;
			$qCarga += floatval($item->cte_peso_bruto);
			$vCarga += floatval($item->cte_valor_carga);
			array_push($ctes_id, $item->cte_id);

			if ($item->cid_origem_uf != $next->cid_origem_uf || $item->cid_destino_uf != $next->cid_destino_uf || empty($next)) {
				$sql = "INSERT INTO mdfes SET ";
				$sql.= "emp_id = ".$this->empresa->emp_id.",";
				$sql.= "TpEmit = ".$item->TpEmit.",";
				$sql.= "UFIni = ".$this->escape($item->cid_origem_uf).",";
				$sql.= "UFFim = ".$this->escape($item->cid_destino_uf).",";
				$sql.= "codAgPorto = ".$this->escape($item->codAgPorto, "string").",";
				$sql.= "qCTe = ".$qCTe.",";
				$sql.= "vCarga = ".$vCarga.",";
				$sql.= "qCarga = ".$qCarga.",";
				$sql.= "infAdFisco = ".$this->escape($item->cte_info_fisco, "string").",";
				$sql.= "infCpl = ".$this->escape($item->cte_obs_gerais, "string");
				if (!$this->query($sql)) {
					print json_encode($this->get_sql_error());
					return false;
				}
				$mdf_id = $this->insert_id();
				array_push($list_id, $mdf_id);
				foreach ($ctes_id as $cte_id) {
					$sql = "INSERT INTO mdfes_ctes SET ";
					$sql.= "mdfe_id = ".$mdf_id.",";
					$sql.= "ctes_id = ".$cte_id;
					if (!$this->query($sql)) {
						print json_encode($this->get_sql_error());
						return false;
					}
				}
				$qCTe = 0;
				$vCarga = 0;
				$qCarga = 0;
				$ctes_id = array();

				$s = "INSERT INTO mdfes_inf_unid_transp (";
				$s.= "mdfe_id,";
				$s.= "cte_mo_id";
				$s.= ") SELECT ";
				$s.= $mdf_id.",";
				$s.= "t1.cte_rv_id ";
				$s.= "FROM ctes_rod_motoristas AS t1 ";
				$s.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
				$s.= "WHERE t2.mdfe_id = ".$mdf_id." ";
				$s.= "GROUP BY t1.cte_mo_cpf";
				if (!$this->query($s)) {
					print json_encode($this->get_sql_error());
					return false;
				}
			}
		}
		print json_encode(array("success"=>true,"mdf_list_id"=>join(",", $list_id)));
	}
	/**
	 * Excluir MDF-e e suas dependências
	 * @remotable
	 * @access public
	 * @return outpup (json)
	 */
	function delete_mdfe() {
		$id = trim($_POST['id']);
		$sql = "DELETE FROM mdfes WHERE id IN (".$id.")";
		if (!$this->query($sql)) {
			print json_encode($this->get_sql_error());
			return false;
		}
		print json_encode(array("success" => $this->affected_rows() > 0));
	}
	/**
	 * Transmitir MDF-e para SEFAZ. Uso exclusivo do Ajax Request
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function transmitir() {
		$razao_social_homologacao = 'MDF-E EMITIDO EM AMBIENTE DE HOMOLOGACAO - SEM VALOR FISCAL';
		$empresa_razao_social = $this->empresa->emp_ambiente_sefaz == 2 ? $razao_social_homologacao : $this->empresa->emp_razao_social;
		$empresa_fone = str_replace(" ", "", $this->empresa->emp_fone1);

		$list_id = trim($_POST['id']);
		$mmFiscal = new FiscalMacromindMDFe(array(
			'eCodigo' => $this->empresa->emp_webservice_codigo,
			'nChave' => $this->empresa->emp_webservice_chave,
			'tRetorno' => 'json',
			'vApi' => '4'
		));
		if (is_string($mmFiscal)) {
			print json_encode(array('success'=>false,'msg'=>$mmFiscal));
			return false;
		}

		$success_id = $failure_id = $records = array();

		$sql = "SELECT * FROM view_mdfes WHERE id IN (".$list_id.") AND situacao IN ('DIGITAÇÃO','REJEITADO')";
		$this->debug($sql);
		$query = $this->query($sql);
		while ($field = $this->fetch_object($query)) {
			$field->nMDF = intval($field->nMDF);
			$field->serie = intval($field->serie);

			foreach ($field as $key => $value) {
				if (preg_match("/fone/i", $key) && !empty($value)) {
					$value = str_replace(" ", "", $value);
					$field->$key = $value;
				}
			}

			$infModal = array(
				'versaoModal' => '3.00',
				'rodo' => array(
					'infANTT' => array(
						'RNTRC' => $this->empresa->emp_RNTRC,
						/*'CIOT' => $field->lista_ciot NA NOVA API EXIGE CPF/CNPJ*/
						'infContratante' => array(
							'CNPJ' => $field->clie_tomador_cnpj
						)
					),
					'veicTracao' => array()
				)
			);
			if (empty($this->empresa->emp_RNTRC)) {
				unset($infModal['rodo']['RNTRC']);
			}
			/*if (empty($field->lista_ciot)) {
				unset($infModal['rodo']['CIOT']);
			}*/
			$s = "SELECT ";
			$s.= "IF(t1.veic_trac_id > 0, t4.cInt, t3.cte_rv_codigo_interno) AS cte_rv_codigo_interno,";
			$s.= "IF(t1.veic_trac_id > 0, t4.placa, t3.cte_rv_placa) AS cte_rv_placa,";
			$s.= "IF(t1.veic_trac_id > 0, t4.RENAVAM, t3.cte_rv_renavam) AS cte_rv_renavam,";
			$s.= "IF(t1.veic_trac_id > 0, t4.tara, t3.cte_rv_tara) AS cte_rv_tara,";
			$s.= "IF(t1.veic_trac_id > 0, t4.capKG, t3.cte_rv_cap_kg) AS cte_rv_cap_kg,";
			$s.= "IF(t1.veic_trac_id > 0, t4.capM3, t3.cte_rv_cap_m3) AS cte_rv_cap_m3,";
			$s.= "RIGHT(CONCAT('0', IF(t1.veic_trac_id > 0, t4.tpRod, t3.cte_rv_tp_rodado)), 2) AS cte_rv_tp_rodado,";
			$s.= "RIGHT(CONCAT('0', IF(t1.veic_trac_id > 0, t4.tpCar, t3.cte_rv_tp_carroceria)), 2) AS cte_rv_tp_carroceria,";
			$s.= "IF(t1.veic_trac_id > 0, t4.UF, t3.cte_rv_uf_licenciado) AS cte_rv_uf_licenciado,";
			$s.= "IF(t1.veic_trac_id > 0, IF(t4.agre_id > 0, 'T', 'P'), t3.cte_rv_tp_propriedade) AS cte_rv_tp_propriedade,";
			$s.= "RIGHT(CONCAT('00000000000000', IF(t1.veic_trac_id > 0, IF(t5.tipo_documento = 'CNPJ', t5.documento, NULL), t3.cte_rv_cnpj)), 14) AS cte_rv_cnpj,";
			$s.= "RIGHT(CONCAT('00000000000000', IF(t1.veic_trac_id > 0, IF(t5.tipo_documento = 'CPF', t5.documento, NULL), t3.cte_rv_cpf)), 11) AS cte_rv_cpf,";
			$s.= "IF(t1.veic_trac_id > 0, t5.RNTRC, t3.cte_rv_rntrc) AS cte_rv_rntrc,";
			$s.= "IF(t1.veic_trac_id > 0, t5.xNome, t3.cte_rv_razao_social) AS cte_rv_razao_social,";
			$s.= "IF(t1.veic_trac_id > 0, t5.IE, t3.cte_rv_inscricao_estadual) AS cte_rv_inscricao_estadual,";
			$s.= "IF(t1.veic_trac_id > 0, t5.tpProp, t3.cte_rv_tp_proprietario) AS cte_rv_tp_proprietario ";
			$s.= "FROM mdfes_inf_unid_transp AS t1 ";
			$s.= "LEFT JOIN ctes_rod_motoristas AS t2 ON t2.cte_mo_id = t1.cte_mo_id ";
			$s.= "LEFT JOIN ctes_rod_veiculos AS t3 ON t3.cte_rv_id = t2.cte_rv_id ";
			$s.= "LEFT JOIN veiculos AS t4 ON t4.id = t1.veic_trac_id ";
			$s.= "LEFT JOIN agregados AS t5 ON t5.id = t4.agre_id ";
			$s.= "WHERE t1.mdfe_id = ".$field->id." ";
			$s.= "AND (t1.cte_mo_id > 0 OR t1.veic_trac_id > 0) ";
			$s.= "LIMIT 1";
			$q = $this->query($s);
			$f = $this->fetch_object($q);
			$veicTracao = array(
				'cInt' => $f->cte_rv_codigo_interno,
				'placa' => $f->cte_rv_placa,
				'RENAVAM' => $f->cte_rv_renavam,
				'tara' => $f->cte_rv_tara,
				'capKG' => $f->cte_rv_cap_kg,
				'capM3' => $f->cte_rv_cap_m3,
				'prop' => "",
				'condutor' => array(),
				'tpRod' => $f->cte_rv_tp_rodado,
				'tpCar' => $f->cte_rv_tp_carroceria,
				'UF' => $f->cte_rv_uf_licenciado
			);
			if (empty($f->cte_rv_codigo_interno)) {
				unset($veicTracao['cInt']);
			}
			if ($f->cte_rv_tp_propriedade == "T") {
				$propVeicTracao = array();
				$cte_rv_cpf = intval($f->cte_rv_cpf);
				$cte_rv_cnpj = intval($f->cte_rv_cnpj);
				if ($cte_rv_cpf > 0) {
					$propVeicTracao['CPF'] = $f->cte_rv_cpf;
				} elseif ($cte_rv_cnpj > 0) {
					$propVeicTracao['CNPJ'] = $f->cte_rv_cnpj;
				}
				$propVeicTracao['RNTRC'] = $f->cte_rv_rntrc;
				$propVeicTracao['xNome'] = $f->cte_rv_razao_social;
				if (!empty($f->cte_rv_inscricao_estadual)) {
					$propVeicTracao['IE'] = $f->cte_rv_inscricao_estadual;
				}
				$propVeicTracao['tpProp'] = $f->cte_rv_tp_proprietario;

				$veicTracao['prop'] = $propVeicTracao;
			} else {
				unset($veicTracao['prop']);
			}
			$this->free_result($q);

			$s = "SELECT ";
			$s.= "IF(t1.mot_id > 0, t3.cpf, t2.cte_mo_cpf) AS cte_mo_cpf,";
			$s.= "IF(t1.mot_id > 0, t3.nome, t2.cte_mo_motorista) AS cte_mo_motorista ";
			$s.= "FROM mdfes_inf_unid_transp AS t1 ";
			$s.= "LEFT JOIN ctes_rod_motoristas AS t2 ON t2.cte_mo_id = t1.cte_mo_id ";
			$s.= "LEFT JOIN motoristas AS t3 ON t3.id = t1.mot_id ";
			$s.= "WHERE t1.mdfe_id = ".$field->id." ";
			$s.= "AND (t1.cte_mo_id OR t1.mot_id > 0) ";
			$s.= "ORDER BY cte_mo_motorista";
			$q = $this->query($s); $condutorVeicTracao = array();
			while ($f = $this->fetch_object($q)) {
				array_push($veicTracao['condutor'], array(
					'xNome' => $f->cte_mo_motorista,
					'CPF' => str_pad($f->cte_mo_cpf,11,'0', STR_PAD_LEFT)
				));
			}
			$this->free_result($q);

			array_push($infModal['rodo']['veicTracao'], $veicTracao);

			$s = "SELECT t1.* FROM ctes_rod_veiculos AS t1 ";
			$s.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
			$s.= "WHERE t2.mdfe_id = ".$field->id." ";
			$s.= "AND t1.cte_rv_tp_veiculo = 1";
			$q = $this->query($s);
			if ($this->num_rows($q)) {
				$infModal['rodo']['veicReboque'] = array();
				while ($f = $this->fetch_object($q)) {
					$veicReboque = array(
						'cInt' => $f->cte_rv_codigo_interno,
						'placa' => $f->cte_rv_placa,
						'RENAVAM' => $f->cte_rv_renavam,
						'tara' => $f->cte_rv_tara,
						'capKG' => $f->cte_rv_cap_kg,
						'capM3' => $f->cte_rv_cap_m3,
						'prop' => "",
						'tpRod' => $f->cte_rv_tp_rodado,
						'tpCar' => $f->cte_rv_tp_carroceria,
						'UF' => $f->cte_rv_uf_licenciado
					);
					if (empty($f->cte_rv_codigo_interno)) {
						unset($veicReboque['cInt']);
					}
					if ($f->cte_rv_tp_propriedade == "T") {
						$propVeicReboque = array();
						if (!empty($f->cte_rv_cpf)) {
							$propVeicReboque['CPF'] = $f->cte_rv_cpf;
						} elseif (!empty($f->cte_rv_cnpj)) {
							$propVeicReboque['CNPJ'] = $f->cte_rv_cnpj;
						}
						$propVeicReboque['RNTRC'] = $f->cte_rv_rntrc;
						$propVeicReboque['xNome'] = $f->cte_rv_razao_social;
						if (!empty($f->cte_rv_inscricao_estadual)) {
							$propVeicReboque['IE'] = $f->cte_rv_inscricao_estadual;
						}
						$propVeicReboque['tpProp'] = $f->cte_rv_tp_proprietario;

						$veicReboque['prop'] = $propVeicReboque;
					} else {
						unset($veicReboque['prop']);
					}
					array_push($infModal['rodo']['veicReboque'], $veicReboque);
				}
			}
			$this->free_result($q);

			$s = "SELECT * FROM ctes_rod_vale_pedagio AS t1 ";
			$s.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
			$s.= "WHERE t2.mdfe_id = ".$field->id;
			$q = $this->query($s);
			if ($this->num_rows($q)) {
				$infModal['rodo']['infANTT']['valePed'] = array();
				while ($f = $this->fetch_object($q)) {
					array_push($infModal['rodo']['infANTT']['valePed'], array(
						'disp' => array(
							'CNPJForn' => $f->cte_vp_cnpj_fornec,
							'CNPJPg' => $f->cte_vp_cnpj_responsavel,
							'nCompra' => $f->cte_vp_comprov_compra
						)
					));
				}
			}
			$this->free_result($q);

			$aDados = array(
				'ide' => array(
					'cUF' => $this->empresa->cid_codigo_uf,
					'tpAmb' => $this->empresa->emp_ambiente_sefaz,
					'tpEmit' => $field->TpEmit,
					'mod' => $field->mod,
					'serie' => $field->serie,
					'nMDF' => $field->nMDF,
					'cMDF' => "",
					'cDV' => "",
					'modal' => intval($this->empresa->emp_modal_codigo),
					'dhEmi' => str_replace(" ", "T", $field->dhEmi)."-03:00",
					'tpEmis' => $field->tpEmis,
					'procEmi' => $field->procEmi,
					'verProc' => $field->verProc,
					'UFIni' => $field->UFIni,
					'UFFim' => $field->UFFim,
					'infMunCarrega' => array(),
					'infPercurso' => array()
				),
				'emit' => array(
					'CNPJ' => $this->empresa->emp_cnpj,
					'IE' => $this->empresa->emp_inscricao_estadual,
					'xNome' => $empresa_razao_social,
					'enderEmit' => array(
						'xLgr' => $this->empresa->emp_logradouro,
						'nro' => $this->empresa->emp_numero,
						'xBairro' => $this->empresa->emp_bairro,
						'cMun' => substr($this->empresa->cid_codigo_municipio, -7),
						'xMun' => truncate($this->empresa->cid_municipio, 60),
						'CEP' => $this->empresa->emp_cep,
						'UF' => $this->empresa->cid_uf,
						'fone' => $empresa_fone
					)
				),
				'infModal' => $infModal,
				'infDoc' => array(
					'infMunDescarga' => array()
				),
				'seg' => array(
					'infResp' => array(
						'respSeg' => 1
					),
					'infSeg' => array(
						'xSeg' => $this->empresa->emp_seguradora,
						'CNPJ' => ''
					),
					'nApol' => $this->empresa->emp_apolice,
					'nAver' => "0000".$field->nMDF
				),
				'tot' => array(
					'qCTe' => $field->qCTe,
					'vCarga' => $field->vCarga,
					'cUnid' => '01',
					'qCarga' => $field->qCarga
				)
			);

			$s = "SELECT DISTINCT UFPer FROM mdfes_percurso ";
			$s.= "WHERE mdfe_id = ".$field->id." ";
			$s.= "AND UFPer IS NOT NULL AND UFPer != '' ";
			$s.= "ORDER BY id";
			$q = $this->query($s);
			while ($f = $this->fetch_object($q)) {
				array_push($aDados['ide']['infPercurso'], $f);
			}
			$this->free_result($q);
			if (empty($aDados['ide']['infPercurso'])) {
				unset($aDados['ide']['infPercurso']);
			}

			$s = "SELECT t1.cid_origem_codigo_municipio, t1.cid_origem_municipio ";
			$s.= "FROM view_ctes AS t1 ";
			$s.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
			$s.= "WHERE t2.mdfe_id = ".$field->id." ";
			$s.= "GROUP BY t1.cid_origem_codigo_municipio, t1.cid_origem_municipio";
			$q = $this->query($s);
			while ($f = $this->fetch_object($q)) {
				array_push($aDados['ide']['infMunCarrega'], array(
					'cMunCarrega' => $f->cid_origem_codigo_municipio,
					'xMunCarrega' => $f->cid_origem_municipio
				));
			}
			$this->free_result($q);


			$s = "SELECT t1.cid_id_destino, t1.cid_destino_codigo_municipio, t1.cid_destino_municipio ";
			$s.= "FROM view_ctes AS t1 ";
			$s.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
			$s.= "WHERE t2.mdfe_id = ".$field->id." ";
			$s.= "GROUP BY t1.cid_id_destino";
			$q = $this->query($s);
			while ($f = $this->fetch_object($q)) {
				$infMunDescarga = array(
					'cMunDescarga' => $f->cid_destino_codigo_municipio,
					'xMunDescarga' => $f->cid_destino_municipio,
					'infCTe' => array()
				);

				$S = "SELECT t1.cte_chave FROM ctes AS t1 ";
				$S.= "INNER JOIN mdfes_ctes AS t2 ON t2.ctes_id = t1.cte_id ";
				$S.= "WHERE t2.mdfe_id = ".$field->id." ";
				$S.= "AND t1.cid_id_destino = ".$f->cid_id_destino;
				$Q = $this->query($S);
				while ($i = $this->fetch_object($Q)) {
					array_push($infMunDescarga['infCTe'], array('chCTe' => $i->cte_chave));
				}
				$this->free_result($Q);

				array_push($aDados['infDoc']['infMunDescarga'], $infMunDescarga);
			}
			$this->free_result($q);

			$this->debug($aDados);
			$this->debug(json_encode($aDados));
			$rEnvio = $mmFiscal->enviar($aDados);
			if (empty($rEnvio)) {
				print json_encode(array('success'=>false,'msg'=>'Erro ao tentar enviar dados para o webservice, tente novamente ou mais tarde. Se o erro persistir contate o administrador.'));
				return false;
			}
			$rEnvio = json_decode($rEnvio);
			if ($rEnvio->status === true) {
				$sql = "UPDATE mdfes SET cMDF = ".$this->escape($rEnvio->dados->chave, "string")." WHERE id = ".$field->id;
				if (!$this->query($sql)) {
					print json_encode($this->get_sql_error());
					return false;
				}
			} else {
				$this->debug($rEnvio);
			}
			$protocolo = $rEnvio->dados->aProt;
			if (empty($protocolo)) $protocolo = $rEnvio->dados->nProt;
			if (empty($protocolo)) $protocolo = $rEnvio->dados->nRec;
			$mensagem = $rEnvio->dados->xMotivo;
			if (empty($mensagem)) $mensagem = $rEnvio->mensagem;
			if (!empty($mensagem)) {
				$this->registrar_evento(array(
					'mdfe_id' => $field->id,
					'codigo' => $rEnvio->codigo,
					'mensagem' => $mensagem,
					'protocolo' => $protocolo
				));
			}

			$rTransmissao = $mmFiscal->transmitir($field->nMDF);
			if (empty($rTransmissao)) {
				print json_encode(array('success'=>false,'msg'=>'Erro ao tentar transmitir dados para sefaz, tente novamente ou mais tarde. Se o erro persistir contate o administrador.'));
				return false;
			}
			$rTransmissao = json_decode($rTransmissao);
			if ($rTransmissao->status === true) {
				$sql = "UPDATE mdfes SET situacao = 'TRANSMITIDO' WHERE id = ".$field->id;
				if (!$this->query($sql)) {
					print json_encode($this->get_sql_error());
					return false;
				}
				array_push($success_id, $field->id);
				array_push($records, (object) array(
					'id' => $field->id,
					'nMDF' => $field->nMDF,
					'cMDF' => $rEnvio->dados->chave
				));
			} else {
				$this->debug($rTransmissao);
				array_push($failure_id, $field->id);
			}
			$protocolo = $rTransmissao->dados->aProt;
			if (empty($protocolo)) $protocolo = $rTransmissao->dados->nProt;
			if (empty($protocolo)) $protocolo = $rTransmissao->dados->nRec;
			$mensagem = $rTransmissao->dados->xMotivo;
			if (empty($mensagem)) $mensagem = $rTransmissao->mensagem;
			if (!empty($mensagem)) {
				$this->registrar_evento(array(
					'mdfe_id' => $field->id,
					'codigo' => $rTransmissao->codigo,
					'mensagem' => $mensagem,
					'protocolo' => $protocolo
				));
			}
		}

		if (!empty($records)) {
			if ($this->verifica($records)) {
				$this->arquivos($records);
			}
		}

		print json_encode(array('success'=>true,'success_id'=>$success_id,'failure_id'=>$failure_id));
	}
	/**
	 * Retornar verifica o status da MDF-e na SEFAZ. Uso exclusivo do Ajax Request
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function verifica($pDados="") {
		$records = empty($pDados) ? json_decode($_POST['records']) : $pDados;
		$mmFiscal = new FiscalMacromindMDFe(array(
			'eCodigo' => $this->empresa->emp_webservice_codigo,
			'nChave' => $this->empresa->emp_webservice_chave,
			'tRetorno' => 'json',
			'vApi' => '4'
		));
		if (is_string($mmFiscal)) {
			print json_encode(array('success'=>false,'msg'=>$mmFiscal));
			return false;
		}
		$success_id = $failure_id = array();
		foreach ($records as $record) {
			$result = $mmFiscal->status($record->nMDF);
			$result = json_decode($result);
			$this->debug($result);

			$protocolo = $result->dados->aProt;
			if (empty($protocolo)) $protocolo = $result->dados->nProt;
			if (empty($protocolo)) $protocolo = $result->dados->nRec;
			$mensagem = $result->dados->xMotivo;
			if (empty($mensagem)) $mensagem = $result->mensagem;
			if (!empty($mensagem)) {
				$this->registrar_evento(array(
					'mdfe_id' => $record->id,
					'codigo' => $result->codigo,
					'mensagem' => $mensagem,
					'protocolo' => $protocolo
				));
			}

			$mdfe_situacao = "situacao";
			if (preg_match("/REJEITADO|REJEIÇÃO|REJEICAO|Rejeição|rejeição|DENEGADO/i", $result->mensagem)) {
				$mdfe_situacao = "'REJEITADO'";
			} elseif (preg_match("/AUTORIZADO/i", $result->mensagem)) {
				$mdfe_situacao = "'AUTORIZADO'";
			} elseif (preg_match("/CANCELA/i", $result->mensagem)) {
				$mdfe_situacao = "'CANCELADO'";
			}

			if (!empty($result->dados->chMDFe)) {
				$sql = "UPDATE mdfes SET ";
				$sql.= "cMDF = ".$this->escape($result->dados->chMDFe, "string").",";
				$sql.= "situacao = ".$mdfe_situacao." ";
				$sql.= "WHERE id = ".$record->id;
				if (!$this->query($sql)) {
					print json_encode($this->get_sql_error());
					return false;
				}
			}
			array_push($success_id, $record->id);
		}
		if (empty($pDados)) {
			print json_encode(array('success'=>true,'success_id'=>$success_id,'failure_id'=>$failure_id));
		} else {
			return count($success_id) > 0;
		}
	}
	/**
	 * Retornar arquivos gerados pela SEFAZ. Uso exclusivo do Ajax Request
	 * @remotable
	 * @param array $pRecords
	 * @access public
	 * @return output (json)
	 */
	function arquivos($pRecords=null) {
		$records = empty($pRecords) ? json_decode($_POST['records']) : $pRecords;
		$mmFiscal = new FiscalMacromindMDFe(array(
			'eCodigo' => $this->empresa->emp_webservice_codigo,
			'nChave' => $this->empresa->emp_webservice_chave,
			'tRetorno' => 'json',
			'vApi' => '4'
		));
		if (is_string($mmFiscal)) {
			print json_encode(array('success'=>false,'msg'=>$mmFiscal));
			return false;
		}

		$path = '../files';
		if (!is_dir($path)) {
			mkdir($path, 0777);
			chmod($path, 0777);
		}

		$files = $success_id = $failure_id = array();
		foreach ($records as $record) {
			$result = $mmFiscal->arquivos($record->nMDF);
			$result = json_decode($result);
			$this->debug($result);

			if ($result->status === true) {
				$result = $result->dados;
				if (!empty($record->cMDF) && !empty($result->xml)) {
					$file = 'MDFe'.$record->cMDF.'.xml';
					$filename = $path.'/'.$file;
					if (file_exists($filename)) {
						@unlink($filename);
					}

					$fp = fopen($filename, 'w+');
					fwrite($fp, $result->xml);
					fclose($fp);
					chmod($filename, 0777);

					$result->xml = URL.'mod/conhecimentos/mdf/files/'.$file;

					$sql = "UPDATE mdfes SET ";
					$sql.= "xml = ".$this->escape($result->xml).",";
					$sql.= "pdf = ".$this->escape($result->damdfe)." ";
					$sql.= "WHERE id = ".$record->id;
					if (!$this->query($sql)) {
						print json_encode($this->get_sql_error());
						return false;
					}
				}
				array_push($files, array(
					'xml' => $result->xml,
					'pdf' => $result->damdfe
				));
				array_push($success_id, $record->id);
			} else {
				array_push($failure_id, $record->id);
			}
			$protocolo = $result->dados->aProt;
			if (empty($protocolo)) $protocolo = $result->dados->nProt;
			if (empty($protocolo)) $protocolo = $result->dados->nRec;
			$mensagem = $result->dados->xMotivo;
			if (empty($mensagem)) $mensagem = $result->mensagem;
			if (!empty($mensagem)) {
				$this->registrar_evento(array(
					'mdfe_id' => $record->id,
					'codigo' => $result->codigo,
					'mensagem' => $mensagem,
					'protocolo' => $protocolo
				));
			}
		}

		$success = count($files) > 0;
		if (empty($pRecords)) {
			$msg = $success ? "Arquivo(s) recebido(s) com sucesso" : "Falha ao pegar arquivo do webservice, tente novamente ou mais tarde. Se a falha persistir contate o administrador.";
			print json_encode(array('success'=>$success,'files'=>$files,'msg'=>$msg,'success_id'=>$success_id,'failure_id'=>$failure_id));
		} else {
			return $success;
		}
	}
	/**
	 * Cancelar mdfe enviado para SEFAZ. Uso exclusivo do Ajax Request
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function cancelar() {
		$records = json_decode($_POST['records']);
		$mmFiscal = new FiscalMacromindMDFe(array(
			'eCodigo' => $this->empresa->emp_webservice_codigo,
			'nChave' => $this->empresa->emp_webservice_chave,
			'tRetorno' => 'json',
			'vApi' => '4'
		));
		if (is_string($mmFiscal)) {
			print json_encode(array('success'=>false,'msg'=>$mmFiscal));
			return false;
		}
		$success_id = $failure_id = array();
		foreach ($records as $record) {
			$result = $mmFiscal->cancelar($record->nMDF, 'CANCELAMENTO DO MDFE');
			$result = json_decode($result);
			$this->debug($result);

			$protocolo = $result->dados->aProt;
			if (empty($protocolo)) $protocolo = $result->dados->nProt;
			if (empty($protocolo)) $protocolo = $result->dados->nRec;
			$mensagem = $result->dados->xMotivo;
			if (empty($mensagem)) $mensagem = $result->mensagem;

			if ($result->status === true) {
				$sql = "UPDATE mdfes SET ";
				$sql.= "situacao = 'CANCELADO' ";
				$sql.= "WHERE id = ".$record->id;
				if (!$this->query($sql)) {
					print json_encode($this->get_sql_error());
					return false;
				}
				$this->registrar_evento(array(
					'mdfe_id' => $record->id,
					'codigo' => $result->codigo,
					'protocolo' => $protocolo,
					'mensagem' => 'Cancelamento: '.$mensagem
				));
				array_push($success_id, $record->id);
			} else {
				$this->registrar_evento(array(
					'mdfe_id' => $record->id,
					'codigo' => $result->codigo,
					'protocolo' => $protocolo,
					'mensagem' => 'Erro no cancelamento: '.$mensagem
				));
				array_push($failure_id, $record->id);
			}
		}
		print json_encode(array('success'=>true,'success_id'=>$success_id,'failure_id'=>$failure_id));
	}
	/**
	 * Encerrar mdfe enviado para SEFAZ. Uso exclusivo do Ajax Request
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function encerrar() {
		$cMun = substr($_POST['cMun'], -7);
		$records = json_decode($_POST['records']);
		$mmFiscal = new FiscalMacromindMDFe(array(
			'eCodigo' => $this->empresa->emp_webservice_codigo,
			'nChave' => $this->empresa->emp_webservice_chave,
			'tRetorno' => 'json',
			'vApi' => '4'
		));
		if (is_string($mmFiscal)) {
			print json_encode(array('success'=>false,'msg'=>$mmFiscal));
			return false;
		}
		$success_id = $failure_id = array();
		foreach ($records as $record) {
			$result = $mmFiscal->encerrar($record->nMDF, $cMun);
			$result = json_decode($result);
			$this->debug($result);

			$protocolo = $result->dados->aProt;
			if (empty($protocolo)) $protocolo = $result->dados->nProt;
			if (empty($protocolo)) $protocolo = $result->dados->nRec;
			$mensagem = $result->dados->xMotivo;
			if (empty($mensagem)) $mensagem = $result->mensagem;

			if ($result->status === true) {
				$sql = "UPDATE mdfes SET ";
				$sql.= "situacao = 'ENCERRADO' ";
				$sql.= "WHERE id = ".$record->id;
				if (!$this->query($sql)) {
					print json_encode($this->get_sql_error());
					return false;
				}
				$this->registrar_evento(array(
					'mdfe_id' => $record->id,
					'codigo' => $result->codigo,
					'protocolo' => $protocolo,
					'mensagem' => 'Encerramento: '.$mensagem
				));
				array_push($success_id, $record->id);
			} else {
				$this->registrar_evento(array(
					'mdfe_id' => $record->id,
					'codigo' => $result->codigo,
					'protocolo' => $protocolo,
					'mensagem' => 'Erro no encerramento: '.$mensagem
				));
				array_push($failure_id, $record->id);
			}
		}
		print json_encode(array('success'=>true,'success_id'=>$success_id,'failure_id'=>$failure_id));
	}
	/**
	 * Gravar evento de retorno do WebService
	 * @access private
	 * @param $data array assoc
	 * @param $checkExist boolean
	 * @return bool
	 */
	private function registrar_evento($data, $checkExist=false) {
		$data['mdfe_id'] = intval($data['mdfe_id']);
		$data['codigo'] = $this->escape($data['codigo'], "string");
		$data['mensagem'] = $this->escape($data['mensagem'], "string");
		$data['protocolo'] = $this->escape($data['protocolo'], "string");

		if ($checkExist === true) {
			$sql = "SELECT COUNT(*) AS existente FROM mdfes_eventos ";
			$sql.= "WHERE mdfe_id = ".$data['mdfe_id']." ";
			$sql.= "AND evento = ".$data['codigo']." ";
			$sql.= "AND detalhe = ".$data['mensagem'];
			$query = $this->query($sql);
			$exist = $this->fetch_object($query)->existente > 0;
			$this->free_result($query);
			if ($exist) {
				return true;
			}
		}

		$sql = "INSERT INTO mdfes_eventos SET ";
		$sql.= "mdfe_id = ".$data['mdfe_id'].",";
		$sql.= "evento = ".$data['codigo'].",";
		$sql.= "protocolo = ".$data['protocolo'].",";
		$sql.= "detalhe = ".$data['mensagem'].",";
		$sql.= "data_hora = NOW() ";
		if (!$this->query($sql)) {
			print json_encode($this->get_sql_error());
			return false;
		}

		return true;
	}
	/**
	 * Consultar Percursos do MDFe's
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function read_percursos() {
		$sql = "SELECT * FROM mdfes_percurso WHERE mdfe_id = ".intval($_GET['mdfe_id']);
		$query = $this->query($sql); $list = array();
		while ($field = $this->fetch_object($query)) {
			array_push($list, $field);
		}
		print json_encode(array('total'=>count($list),'data'=>$list));
	}
	/**
	 * Salvar Percursos do MDFe's
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function save_percursos() {
		$id = intval($_POST["id"]);
		$mdfe_id = intval($_POST["mdfe_id"]);
		$UFPer = $this->escape($_POST["UFPer"]);

		$sql = ($id > 0) ? "UPDATE " : "INSERT INTO ";
		$sql.= "mdfes_percurso SET ";
		$sql.= "mdfe_id = ".$mdfe_id.",";
		$sql.= "UFPer = ".$UFPer." ";
		$sql.= ($id > 0) ? "WHERE id = ".$id : "";
		if (!$this->query($sql)) {
			print json_encode($this->get_sql_error());
			return false;
		}
		if (!$id) {
			$id = $this->insert_id();
		}
		print json_encode(array("success"=>true,"id"=>$id));
	}
	/**
	 * Excluir Percursos do MDFe's
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function delete_percursos() {
		$sql = "DELETE FROM mdfes_percurso WHERE id IN (".trim($_POST["id"]).")";
		if (!$this->query($sql)) {
			print json_encode($this->get_sql_error());
			return false;
		}
		print json_encode(array("success"=>true));
	}
	/**
	 * Consultar motoristas relacionados a MDF-e
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function read_motorista() {
		$sql = "SELECT t1.*,";
		$sql.= "IF(t1.cte_mo_id > 0, CONCAT_WS(' ', t4.cte_mo_motorista, t4.cte_mo_cpf), CONCAT_WS(' ', t3.nome, t3.cpf)) AS motorista,";
		$sql.= "IF(t1.cte_mo_id > 0, CONCAT_WS(' ', t5.cte_rv_tp_rodado_rotulo, t5.cte_rv_tp_carroceria_rotulo, '-', t5.cte_rv_placa, CONCAT('(', t5.cte_rv_cap_kg, 'kg)')), CONCAT_WS(' ', t2.tpRod_rotulo, t2.tpCar_rotulo, '-', t2.placa, CONCAT('(', t2.capKG, 'kg)'))) AS veiculo ";
		$sql.= "FROM mdfes_inf_unid_transp AS t1 ";
		$sql.= "LEFT JOIN veiculos AS t2 ON t2.id = t1.veic_trac_id ";
		$sql.= "LEFT JOIN motoristas AS t3 ON t3.id = t1.mot_id ";
		$sql.= "LEFT JOIN ctes_rod_motoristas AS t4 ON t4.cte_mo_id = t1.cte_mo_id ";
		$sql.= "LEFT JOIN ctes_rod_veiculos AS t5 ON t5.cte_rv_id = t4.cte_rv_id ";
		$sql.= "WHERE t1.mdfe_id = ".intval($_GET["mdfe_id"])." ";
		$sql.= "ORDER BY motorista";
		$query = $this->query($sql); $list = array();
		while ($field = $this->fetch_object($query)) {
			array_push($list, $field);
		}
		print json_encode(array('total'=>count($list),'data'=>$list));
	}
	/**
	 * Salvar relacionamento motorista com veículo com MDF-e
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function save_motorista() {
		$mdfe_id = intval($_POST["mdfe_id"]);
		$veic_id = intval($_POST["veic_id"]);
		$mot_id = intval($_POST["mot_id"]);

		$sql = "SELECT COUNT(*) AS existente FROM mdfes_inf_unid_transp ";
		$sql.= "WHERE mdfe_id = ".$mdfe_id." ";
		$sql.= "AND mot_id = ".$mot_id." ";
		$sql.= "AND veic_trac_id = ".$veic_id;
		$query = $this->query($sql);
		$exist = $this->fetch_object($query)->existente > 0;
		$this->free_result($query);

		if ($exist) {
			print json_encode(array("success"=>true));
			return true;
		}

		$sql = "INSERT INTO mdfes_inf_unid_transp SET ";
		$sql.= "mdfe_id = ".$mdfe_id.",";
		$sql.= "mot_id = ".$mot_id.",";
		$sql.= "veic_trac_id = ".$veic_id;
		if (!$this->query($sql)) {
			print json_encode($this->get_sql_error());
			return false;
		}

		print json_encode(array("success"=>true));
	}
	/**
	 * Excluir relacionamento motorista com veículo com MDF-e
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function delete_motorista() {
		$records = json_decode($_POST["records"]);
		foreach ($records as $record) {
			$sql = "DELETE FROM mdfes_inf_unid_transp ";
			$sql.= "WHERE mdfe_id = ".$record->mdfe_id;
			$sql.= ($record->cte_mo_id > 0) ? " AND cte_mo_id = ".$record->cte_mo_id : "";
			$sql.= ($record->mot_id > 0) ? " AND mot_id = ".$record->mot_id : "";
			$sql.= ($record->veic_trac_id > 0) ? " AND veic_trac_id = ".$record->veic_trac_id : "";
			if (!$this->query($sql)) {
				print json_encode($this->get_sql_error());
				return false;
			}
		}
		print json_encode(array("success"=>true));
	}
	/**
	 * Carregar lista de motorista através de $veic_id
	 * @remotable
	 * @access public
	 * @return output (json)
	 */
	function motorista_store() {
		$sql = "SELECT ";
		$sql.= "t1.id,";
		$sql.= "CONCAT_WS(' ', t1.nome, t1.cpf) AS nome_cpf ";
		$sql.= "FROM motoristas AS t1 ";
		$sql.= "INNER JOIN veiculos_condutores AS t2 ON t2.moto_id = t1.id ";
		$sql.= "WHERE t2.veic_trac_id = ".intval($_GET["veic_id"])." ";
		$sql.= "ORDER BY t1.nome";
		$query = $this->query($sql); $list = array();
		while ($field = $this->fetch_object($query)) {
			array_push($list, $field);
		}
		print json_encode(array('total'=>count($list),'data'=>$list));
	}
}
?>